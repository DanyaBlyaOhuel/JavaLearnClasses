import java.lang.Math;
import java.util.Arrays;

public class MainClass {

    public static void main(String[] args) {

        //1
//        System.out.println(Arrays.toString(removeFrom(new int[]{1, 1, 2, 4, 5, 8}, 5)));

        //2
//        System.out.println(Arrays.deepToString(matrixColumnReplace(new int[][]{{1, 1, 3}, {2,4,4}, {4,-3,6}}, new int[]{6,6,6})));
        System.out.println(Arrays.deepToString(multMatrix(new int[][]{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, new int[][]{{1, 1, 1}, {2, 4, 7}, {9, 3, 2}})));
        numbers(5);
    }

    //1 removeFrom
    static int[] removeFrom(int[] arr, int x) {
        int[] arrNew = new int[0];
        for (int i = 0, k = 0; i < arr.length; i++) {
            if (arr[i] != x) {
                arrNew = Arrays.copyOf(arrNew, arrNew.length + 1);
                arrNew[k] = arr[i];
                k++;
            }
        }
        return arrNew;

    }

    //2 matrixColumnReplace
    static int[][] matrixColumnReplace(int[][] arr, int[] y) {

        for (int i = 0, k = 0; i < arr.length; i++) {
            boolean isOdd = false, isNegative = false;
            int sumj = 0;
            for (int j = 0; j < arr[i].length; j++) {
                if (arr[i][j] < 0) {
                    isNegative = true;
                    break;
                }

                sumj += arr[i][j];

            }

            if (sumj % 2 == 0) {
                isOdd = true;
            }
            if (isNegative || isOdd) {
                arr[i] = y;
            }
        }
        return arr;

    }

    //3 multMatrix
    static int[][] multMatrix(int[][] x, int[][] y) {
        for (int i = 0; i < x.length; i++) {
            for (int j = 0; j < x[i].length; j++) {
                x[i][j] *= y[j][i];
            }

        }
        return x;
    }

    // 4
    static void numbers(int n) {
        if (n != 1) {
            numbers(n - 1);
        }
        int[] arr = new int[n];
//        for (int i = 0; n > 0; n--, i++) {
        for (; n > 0; n--) {
            arr[arr.length - n] = n;
        }
        System.out.println(Arrays.toString(arr));
    }

   // 5

    private class Point{
        private double x = 0d, y = 0d;

        public Point(double x, double y){
            this.x = x;
            this.y = y;
        }

        public  Point frst (double x, double y){
            return new Point(x, y);
        }

    }
}

